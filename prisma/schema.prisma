// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TrackerSource {
  RC
  GARGUL
}

enum raidSize {
  TWENTY_FIVE
  TEN
}

enum raidDiffculty {
  NORMAL
  HEROIC
}

model rcLootItem {
  id            String    @id
  player        String
  dateTime      DateTime?
  itemId        Int
  itemString    String
  response      String
  votes         Int
  class         String
  instance      String
  boss          String
  gear1         String
  gear2         String
  responseId    String
  isAwardReason Boolean
  rollType      String
  subType       String
  equipLoc      String
  note          String
  owner         String
  itemName      String

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  bLootDBItem blizzAPIItem? @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
}

model lootItem {
  id            String         @id @default(cuid())
  trackerId     String
  source        TrackerSource
  player        String
  date          DateTime?
  time          String?
  dateTime      DateTime?
  itemId        Int
  itemString    String?
  response      String?
  offspec       Int?
  votes         Int?
  class         String?
  instance      String?
  boss          String?
  gear1         String?
  gear2         String?
  responseID    String?
  isAwardReason Boolean?
  rollType      String?
  subType       String?
  equipLoc      String?
  note          String?
  owner         String?
  itemName      String?
  raidSize      raidSize?
  raidDiffculty raidDiffculty?

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  bLootDBItem blizzAPIItem? @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trackerId, player, guildId])
}

model blizzAPIItem {
  id                  Int     @id
  name                String
  qualityType         String
  level               Int?
  requiredLevel       Int?
  mediaHref           String?
  itemClassName       String?
  itemSubclassName    String?
  inventoryType       String?
  inventoryName       String?
  bindingType         String?
  bindingName         String?
  uniqueEquipped      String?
  previewArmor        Json?
  previewWeapon       Json?
  previewStats        Json?
  previewSpells       Json?
  previewRequirements Json?
  previewSet          Json?
  thumbnail           String

  dropList      rcLootItem[]
  dropInstances lootItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guild {
  id        String   @id @default(cuid())
  name      String
  server    String
  image     String?
  Admin     User     @relation("Admin", fields: [adminId], references: [id])
  adminId   String
  officers  User[]   @relation("Officer")
  members   User[]   @relation("Member")
  pending   User[]   @relation("Pending")
  createdAt DateTime @default(now())

  rcLootItem rcLootItem[]
  lootItem   lootItem[]

  @@unique([name, server])
}

//Next Auth Models
model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  lastSignedIn  DateTime?
  accounts      Account[]
  sessions      Session[]
  guildAdmin    Guild[]   @relation("Admin")
  guildOfficer  Guild[]   @relation("Officer")
  guildMember   Guild[]   @relation("Member")
  guildPending  Guild[]   @relation("Pending")
  createdAt     DateTime  @default(now())
}

//Account Hold OAuth Tokens/Data
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  sub               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
